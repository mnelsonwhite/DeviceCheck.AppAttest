using System;
using System.Text;
using Microsoft.CodeAnalysis;

namespace DeviceCheck.AppAttest.Cbor.CodeGeneration;

[Generator]
public class CborDeserializerContextGenerator: ISourceGenerator
{
	public CborDeserializerContextGenerator()
	{
	}

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not SyntaxReceiver syntaxReceiver)
        {
            return;
        }

        foreach (var c in syntaxReceiver.Classes)
        {
            var builder = new StringBuilder();
            builder.AppendLine("// <auto-generated/>");
            builder.AppendLine("#nullable enable");
            builder.AppendLine("using DeviceCheck.AppAttest.Cbor;");
            builder.AppendLine("using System.Diagnostics.CodeAnalysis;");
            builder.AppendLine();
            builder.AppendLine($"namespace {c.namespaceName} {{");
            builder.AppendLine($"\t{c.modifiers} class {c.className}: {nameof(ICborSerializerContext)} {{");
            builder.AppendLine($"\t\tpublic Type {nameof(ICborSerializerContext.GetKeyType)}() => {c.keyType};");

            builder.AppendLine();
            builder.AppendLine($"\t\tpublic void {nameof(ICborSerializerContext.SetProperty)}(object property, object? value, object instance)");
            builder.AppendLine("\t\t{");
            builder.AppendLine("\t\t\tif (_setters.TryGetValue(property, out var setter))");
            builder.AppendLine("\t\t\t{");
            builder.AppendLine($"\t\t\t\tsetter.setDelegate(value, ({c.className}) instance);");
            builder.AppendLine("\t\t\t}");
            builder.AppendLine("\t\t}");
            builder.AppendLine();

            builder.AppendLine($"\t\tpublic bool {nameof(ICborSerializerContext.TryGetPropertyType)}(object property, [NotNullWhen(returnValue:true)] out Type? type)");
            builder.AppendLine("\t\t{");
            builder.AppendLine("\t\t\tif (_setters.TryGetValue(property, out var setter))");
            builder.AppendLine("\t\t\t{");
            builder.AppendLine("\t\t\t\ttype = setter.type;");
            builder.AppendLine("\t\t\t\treturn true;");
            builder.AppendLine("\t\t\t}");
            builder.AppendLine("\t\t\t");
            builder.AppendLine("\t\t\ttype = default;");
            builder.AppendLine("\t\t\treturn false;");
            builder.AppendLine("\t\t}");
            builder.AppendLine();

            builder.AppendLine($"\t\tpublic Dictionary<object, (Type type, Action<object?,{c.className}> setDelegate)> GetSetters() => _setters;");
            builder.AppendLine($"\t\tprivate static readonly Dictionary<object,(Type type, Action<object?,{c.className}> setDelegate)> _setters");
            builder.AppendLine($"\t\t\t= new Dictionary<object, (Type type, Action<object?,{c.className}> setDelegate)>");
            builder.AppendLine("\t\t{");

            if (syntaxReceiver.Props.TryGetValue($"{c.namespaceName}.{c.className}", out var props))
            {
                foreach(var prop in props)
                {
                    builder.AppendLine("\t\t\t{");
                    builder.AppendLine($"\t\t\t\t{prop.keyValue},");
                    builder.AppendLine("\t\t\t\t(");
                    builder.AppendLine($"\t\t\t\t\ttype: typeof({prop.propertyType}),");
                    builder.AppendLine("\t\t\t\t\tsetDelegate: (v,o) => {");
                    builder.AppendLine($"\t\t\t\t\t\tif (v is {prop.propertyType} p) {{");
                    builder.AppendLine($"\t\t\t\t\t\t\to.{prop.propertyName} = p;");
                    builder.AppendLine("\t\t\t\t\t\t}");
                    builder.AppendLine("\t\t\t\t\t}");
                    builder.AppendLine("\t\t\t\t)");
                    builder.AppendLine("\t\t\t},");
                }
            }

            builder.AppendLine("\t\t};");
            builder.AppendLine("\t}");
            builder.AppendLine("}");
            builder.AppendLine("#nullable disable");

            context.AddSource($"{c.className}.g.cs", builder.ToString());
        }
    }

    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
    }
}
